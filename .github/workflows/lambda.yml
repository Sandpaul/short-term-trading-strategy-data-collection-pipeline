name: Build and Push Lambda Pipeline

on:
    push:
        paths:
            - 'src/lambda/**'
            - 'src/utils/**'
            - 'terraform/lambda**'
            - '.github/workflows/lambda.yml'

env:
    AWS_REGION: eu-west-2
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            
            - name: Log in to Amazon ECR
              uses: aws-action/amazon-ecr-login@v1
              with:
                region: ${{ env.AWS_REGION }}
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
            
            - name: Build Docker image
              run: |
                docker build -t lambda-function -f src/lambda/Dockerfile .

            - name: Tag Docker image
              run: |
                docker tag lambda-function:latest 339712945613.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/short_term_trading_data_pipeline_ecr:lambda-latest
            
            - name: Push Docker image
              run: |
                docker push 339712945613.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/short_term_trading_data_pipeline_ecr:lambda-latest
    
    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up AWS CLI
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-region: ${{ env.AWS_REGION }}
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
            
            - name: Terraform Init
              working-directory: terraform
              run: |
                if [ ! -d ".terraform" ]; then
                  terraform init
                else
                  echo "Terraform already initialised"
                fi
            
            - name: Terraform Plan
              working-directory: terraform
              run: terraform plan
      
            - name: Terraform Apply
              working-directory: terraform
              run: terraform apply -auto-approve